[
    {
        "model": "article.article",
        "pk": 1,
        "fields": {
            "author": "厌笔不萧生",
            "title": "vue 项目中ivew按需引入",
            "create_time": "2018-05-19",
            "abstract": "官方文档中介绍了iview的按需引入：  按需引用 #  借助插件 babel-plugin-import可以实现按需加载组件，减少文件体积。首先安装，并在文件 .babelrc 中配置：",
            "content": "官方文档中介绍了iview的按需引入：\r\n按需引用 #\r\n借助插件 babel-plugin-import可以实现按需加载组件，减少文件体积。首先安装，并在文件 .babelrc 中配置：\r\n\r\n```\r\nnpm install babel-plugin-impor",
            "popular_number": 0,
            "views_number": 0,
            "weight": "0"
        }
    },
    {
        "model": "article.article",
        "pk": 2,
        "fields": {
            "author": "厌笔不萧生",
            "title": "Vue项目中路由动态传参功能相关实现",
            "create_time": "2018-05-19",
            "abstract": "这两天在项目中有个新需求：在当前页面中的有很多数据，过滤数据的条件有时间，页码，类型，id搜索….，假设我在页面中选择的某段时间，某个类型，现在我需要把握当前看到的信息完全展现给另一朋友。  server端环境：时间和页码可以动态的传递到后端",
            "content": "这两天在项目中有个新需求：在当前页面中的有很多数据，过滤数据的条件有时间，页码，类型，id搜索....，假设我在页面中选择的某段时间，某个类型，现在我需要把握当前看到的信息完全展现给另一朋友。\r\nserver端环境：时间和页码可以动态的传递到后端\r\n\r\n\r\n\r\n一. 初步解决方案\r\n---------\r\n\r\n\r\n    刚看此需求首先想到的是vue—router的动态传参，于是就开始码代码。将过滤条件相关的变量动态的传说路由中\r\n```\r\n  this.$router.push({query:{date:..,page:..}})\r\n```\r\n 首次进入页面时，取出路由中的query参数\r\n```\r\nthis.$route.query\r\n```\r\n整体思路就是这样，测试发现个严重的问题，\r\n1.页面刷新的问题，在浏览中手动更改query时页面不会刷新（vue路由问题，下面会说到）\r\n查阅官方文档发现文档中有此段话：[记住参数或查询的改变并不会触发进入/离开的导航守卫。你可以通过观察 $route 对象来应对这些变化，或使用 beforeRouteUpdate 的组件内守卫。](https://router.vuejs.org/zh-cn/advanced/navigation-guards.html)\r\n2.项目是单页面，组件之间传值（同级组件）是非常大问题，我需要在每个页面中写一遍代码（不能忍）\r\n\r\n\r\n----------\r\n\r\n\r\n问题1按照官方给出的方式解决：\r\n\r\n```\r\nwatch:{\r\n\"$route\":function(val,oldVal){\r\n...\r\nlocation.reload()\r\n...\r\n}\r\n}\r\n```\r\n路由刷新问题搞定\r\n\r\n\r\n----------\r\n问题2 暂时写个公共方法来解决\r\n\r\n\r\n----------\r\n在次测试时发现，只要我路由参数变化都会重新刷新整个页面（我只想重新请求数据），思考解决方法.....\r\n\r\n二.优化方案\r\n--\r\n过程：为了达到我想要的效果，把路由变化的过程梳理一下。\r\n\r\n 1. 需要全局的变量来存储query中的值（Vuex）\r\n 2. 需要一个开关来控制是否刷新页面（Vuex）\r\n 3. 初始化页面时将路由中的query下发到页面相对应的变量\r\n 4. 页面参数变化是动态的改变路由\r\n 理清楚路由变化之后开始实现\r\n ****存储路由query和控制是否刷新页面的值都用Vuex来实现***\r\n```\r\nnew Vuex.Store({\r\n    state:{\r\n     //控制页面刷新\r\n     isRefresh: true,\r\n      //存储路由中query的值\r\n     queryParams:{}\r\n      },\r\n    mutations: {\r\n    test (state) {\r\n      // 变更状态\r\n      state.queryParams = {\r\n      id:\"test\"\r\n      }\r\n          },\r\n    test2(state) {\r\n      state.isRefresh = \"test\"\r\n   }\r\n  }\r\n  })\r\n```\r\n**初始化页面时将路由中的query下发到页面用公共方法****\r\n```\r\n//obj传入当前页面的data即（this.$data确保query中参数key都是data的属性值）\r\n//queryParams传入当前页面路由的query值\r\n\r\nVue.prototype.$initData=function(obj,queryParams){\r\n     \r\n     //使用双重循环给this.$data中的属性赋值\r\n}\r\n\r\n```\r\n**页面参数变化是动态的改变路由写个公共方法给路由赋值就行了**\r\n\r\n三 总结\r\n----\r\n----------\r\n这个功能的实现是我对vue有了更加深入的了解，vue能从众多的前端框架中脱颖而出跟他与时俱进的开发理念，以及前端项目中的各种相关生态的良好支持有着很大的关系。之前刚接触vue时，就被他前端项目的一键部署以及通俗易懂的开发文档深深的吸引。越是深入了解他的本质，就越发的觉得vue设计思想的wonderful.......",
            "popular_number": 0,
            "views_number": 0,
            "weight": "0"
        }
    },
    {
        "model": "article.article",
        "pk": 3,
        "fields": {
            "author": "厌笔不萧生",
            "title": "vue2.x 项目搭建",
            "create_time": "2018-05-19",
            "abstract": "环境搭建  a) 下载node.js http://nodejs.cn/download/  安装完成后添加到坏境变量  b) 全局安装 vue-cli  npm install -g vue-cli(输入 vue -V输出版本号则为安装成功)",
            "content": "1. 环境搭建\r\n  a) 下载node.js  http://nodejs.cn/download/\r\n       安装完成后添加到坏境变量\r\n  b) 全局安装 vue-cli\r\n      npm install -g vue-cli(输入 vue -V输出版本号则为安装成功)\r\n      \r\n 2. 新建项目\r\n    a)进入你需要新建项目的目录输入：\r\n    vue init webpack test（一直回车即可）\r\n    结束后会生成一个test的文件夹vue的项目则在此目录下如图：\r\n    ![这里写图片描述](http://img.blog.csdn.net/20171129001625597?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHJvX21vbmtleWtpbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\r\n    b)运行项目\r\n    在test目录下输入:\r\n    npm install安装所需插件(注：国内npm不太好用可以去配置下cnpm)如图:\r\n    ![这里写图片描述](http://img.blog.csdn.net/20171129002438378?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHJvX21vbmtleWtpbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\r\n    安装成功后输入\r\n    npm run dev 则可以运行项目如下:\r\n    ![这里写图片描述](http://img.blog.csdn.net/20171129002538381?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcHJvX21vbmtleWtpbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\r\n    在浏览器中输入localhost:8081则可以看到我们的项目页面",
            "popular_number": 0,
            "views_number": 0,
            "weight": "0"
        }
    }
]